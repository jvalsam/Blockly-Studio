{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/debuggee/init.js","webpack:///./src/debuggee/actions/start.js","webpack:///./src/debuggee/debuggee.js","webpack:///./src/debuggee/actions/watches.js","webpack:///./src/debuggee/actions/continue.js","webpack:///./src/debuggee/actions/steps.js","webpack:///./src/debuggee/actions/breakpoints.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","Blockly_Debuggee","actions","InitializeBlocklyDebuggee","plugin","state","currNest","currId","promptMsg","undefined","alertFlag","stepWait","currState","stepIn","stepOver","stepParent","stepOut","continue","isState","this","setState","new_state","wait","next_message","ms","Promise","resolve","setTimeout","async","nest","block_id","currentSystemEditorId","id","postMessage","type","data","highlightBlock","hasBreakpoint","breakpoint","includes_enable","cursorBreakpoint","updateDebugger","wait_view","reset_view","function_return_decorator","return_value","parent_nest","parent","alert","msg","prompt","tmp","dispatcher","update_values","BlocklyDebuggeeStartAction","start_debugging","handler","content","update","breakpoints","watches","variables","getVariables","getWatches","def_variables_code","define_variables","variablesWatches_code","eval","code","$id","wait_call","isStepOver","isStepParent","_init_js__WEBPACK_IMPORTED_MODULE_0__","BlocklyDebuggee","init","start","new_watches","length","evalLocal","includes","variable","updated","watch","new_vars","expr","map","obj","enable","br","runToCursor","onmessage"],"mappings":"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","file":"debuggee.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","\r\nexport var window = {};\r\n\r\nexport var Blockly_Debuggee = {\r\n    actions: {}\r\n};\r\n\r\nexport function InitializeBlocklyDebuggee (plugin) {\r\n    Blockly_Debuggee.state = {\r\n        currNest: 0,\r\n        currId: '',\r\n        promptMsg: undefined,\r\n        alertFlag: false,\r\n        stepWait: false,\r\n        currState: {\r\n            stepIn: false,\r\n            stepOver: false,\r\n            stepParent: false,\r\n            stepOut: false,\r\n            continue: true\r\n        },\r\n        isState: function (state) {\r\n            return this.currState[state];\r\n        },\r\n        setState: function (new_state) {\r\n            this.currState[\"stepIn\"] = false;\r\n            this.currState[\"stepOver\"] = false;\r\n            this.currState[\"stepParent\"] = false;\r\n            this.currState[\"stepOut\"] = false;\r\n            this.currState[\"continue\"] = false;\r\n            this.currState[new_state] = true;\r\n        }\r\n    };\r\n\r\n\r\n    Blockly_Debuggee.wait = (function () {\r\n        function highlightBlock(id, currentSystemEditorId) {\r\n            /*plugin.*/postMessage({ \"type\": \"highlightBlock\", \"data\": { \"id\": id, \"currentSystemEditorId\": currentSystemEditorId } });\r\n        }\r\n\r\n        function sleep(ms) {\r\n            return new Promise(resolve => setTimeout(resolve, ms));\r\n        }\r\n\r\n        function next_message() {\r\n            return sleep(0);\r\n        }\r\n\r\n        async function wait(nest, block_id, currentSystemEditorId) {\r\n            highlightBlock(block_id, currentSystemEditorId);\r\n\r\n            var hasBreakpoint = Blockly_Debuggee.actions.breakpoint.includes_enable(block_id) || (Blockly_Debuggee.actions[\"runToCursor\"].cursorBreakpoint === block_id);\r\n            if ((Blockly_Debuggee.actions[\"runToCursor\"].cursorBreakpoint === block_id))\r\n                Blockly_Debuggee.actions[\"runToCursor\"].cursorBreakpoint = \"\";\r\n            if (Blockly_Debuggee.state.isState(\"continue\") && !hasBreakpoint) {\r\n                Blockly_Debuggee.state.currNest = nest;\r\n                return;\r\n            }\r\n            if (Blockly_Debuggee.state.currNest == -1 && !hasBreakpoint) return;    // stepOver + stepOut for functions                   \r\n            if (Blockly_Debuggee.state.isState(\"stepIn\") || hasBreakpoint || nest <= Blockly_Debuggee.state.currNest) {\r\n                if (Blockly_Debuggee.state.currId === block_id && !hasBreakpoint) return;\r\n                if (Blockly_Debuggee.state.isState(\"stepParent\") && nest == Blockly_Debuggee.state.currNest && !hasBreakpoint) return;\r\n\r\n                // Send the array with vars values \r\n                Blockly_Debuggee.actions[\"variables\"].updateDebugger();\r\n                Blockly_Debuggee.actions[\"watch\"].updateDebugger();\r\n                Blockly_Debuggee.actions[\"breakpoint\"].wait_view(block_id);\r\n\r\n                while (!Blockly_Debuggee.state.stepWait) {\r\n                    await next_message();\r\n                }\r\n                Blockly_Debuggee.actions[\"breakpoint\"].reset_view(block_id);\r\n\r\n                Blockly_Debuggee.state.stepWait = false;\r\n                Blockly_Debuggee.state.currId = block_id;\r\n                if (Blockly_Debuggee.state.isState(\"stepOut\")) {\r\n                    Blockly_Debuggee.state.currNest = -1;\r\n                    Blockly_Debuggee.state.currState.stepOut = false;\r\n                } else {\r\n                    Blockly_Debuggee.state.currNest = nest;\r\n                }\r\n            }\r\n        };\r\n        return wait;\r\n    })();\r\n\r\n\r\n    Blockly_Debuggee.function_return_decorator = function (return_value, parent_nest) {\r\n        if (Blockly_Debuggee.state.currNest != -1)\r\n            Blockly_Debuggee.state.currState.parent = false;\r\n        Blockly_Debuggee.state.currNest = parent_nest;\r\n        return return_value;\r\n    };\r\n\r\n    window.alert = async function (msg) {\r\n        Blockly_Debuggee.actions[\"variables\"].updateDebugger();     // gia na fainontai swsta kata to alert ta value pisw ston pinaka\r\n        Blockly_Debuggee.actions[\"watch\"].updateDebugger();\r\n        setTimeout(function () { /*plugin.*/postMessage({ \"type\": \"alert\", \"data\": msg }); }, 50);\r\n        while (!Blockly_Debuggee.state.alertFlag) {\r\n            await (function () { return new Promise(resolve => setTimeout(resolve, 0)); })();         // next_message();\r\n        }\r\n        Blockly_Debuggee.state.alertFlag = false;\r\n    };\r\n    window.prompt = async function (msg) {\r\n        Blockly_Debuggee.actions[\"variables\"].updateDebugger();     // gia na fainontai swsta kata to prompt ta value pisw ston pinaka\r\n        Blockly_Debuggee.actions[\"watch\"].updateDebugger();\r\n        setTimeout(function () { /*plugin.*/postMessage({ \"type\": \"prompt\", \"data\": msg }); }, 50);\r\n        while (Blockly_Debuggee.state.promptMsg == undefined) {\r\n            await (function () { return new Promise(resolve => setTimeout(resolve, 0)); })();         // next_message();\r\n        }\r\n        var tmp = Blockly_Debuggee.state.promptMsg;\r\n        Blockly_Debuggee.state.promptMsg = undefined;\r\n        return tmp;\r\n    };\r\n}\r\n\r\nexport var dispatcher = {\r\n    prompt: (promptMsg) => {\r\n        Blockly_Debuggee.state.promptMsg = promptMsg;\r\n    },\r\n    alert: () => {\r\n        Blockly_Debuggee.state.alertFlag = true;\r\n    }\r\n};\r\n","import { dispatcher } from '../init.js';\r\nvar Blockly_Debuggee = require(\"../init.js\").Blockly_Debuggee;\r\n\r\nvar window = require(\"../init.js\").window;\r\n\r\nfunction update_values() {\r\n    var update_var = Blockly_Debuggee.actions[\"variables\"].update_values();\r\n    var update_watch = Blockly_Debuggee.actions[\"watch\"].update_values();\r\n    return update_var + update_watch;\r\n}\r\n\r\nexport function BlocklyDebuggeeStartAction(plugin) {\r\n    Blockly_Debuggee.actions.start_debugging = (function () {\r\n        async function handler(content) {\r\n            if (content != undefined) {\r\n                Blockly_Debuggee.actions[\"breakpoint\"].update(content.breakpoints);\r\n                Blockly_Debuggee.actions[\"runToCursor\"].cursorBreakpoint = content.cursorBreakpoint;\r\n                Blockly_Debuggee.actions[\"watch\"].update(content.watches);\r\n                Blockly_Debuggee.actions[\"variables\"].update(content.variables);\r\n                var variables = Blockly_Debuggee.actions[\"variables\"].getVariables();\r\n                var watches = Blockly_Debuggee.actions[\"watch\"].getWatches();\r\n                var def_variables_code = Blockly_Debuggee.actions[\"variables\"].define_variables();\r\n                var variablesWatches_code = \"eval(update_values()); Blockly_Debuggee.actions[\\\"variables\\\"].updateDebugger(); Blockly_Debuggee.actions[\\\"watch\\\"].updateDebugger();\";\r\n                await eval(def_variables_code + \" function evalLocal(expr){eval(expr);} Blockly_Debuggee.actions[\\\"eval\\\"].evalLocal = evalLocal;\" + \"async function code(){ \" + content.code + variablesWatches_code + \"}; code(); \");\r\n\r\n                /*plugin.*/postMessage({ \"type\": \"execution_finished\" });\r\n            } else {\r\n                window.alert(\"The content is undefined.\");\r\n            }\r\n        };\r\n\r\n        async function $id(update_values, wait_call, code) {\r\n            return code;\r\n        };\r\n\r\n        async function wait(nest, block_id, currentSystemEditorId) {\r\n            await Blockly_Debuggee.wait(nest, block_id, currentSystemEditorId);\r\n        };\r\n\r\n        function isStepOver() {\r\n            return Blockly_Debuggee.state.isState(\"stepOver\");\r\n        };\r\n\r\n\r\n        function isStepParent() {\r\n            return Blockly_Debuggee.state.isState(\"stepParent\");\r\n        };\r\n\r\n        return {\r\n            handler: handler\r\n        };\r\n    })();\r\n\r\n\r\n    dispatcher.start_debugging = Blockly_Debuggee.actions[\"start_debugging\"].handler;\r\n}\r\n","import \"./init.js\";\r\nimport { InitializeBlocklyDebuggee, dispatcher } from \"./init.js\";\r\n\r\nimport { BlocklyDebuggeeStartAction } from \"./actions/start\";\r\nimport {\r\n    BlocklyDebuggeeWatchAction,\r\n    BlocklyDebuggeeVariablesAction,\r\n    BlocklyDebuggeeEvalAction\r\n} from \"./actions/watches\";\r\nimport { BlocklyDebuggeeContinueAction } from \"./actions/continue\";\r\nimport {\r\n    BlocklyDebuggeeStepInAction,\r\n    BlocklyDebuggeeStepOverAction,\r\n    BlocklyDebuggeeStepOutAction,\r\n    BlocklyDebuggeeStepParentAction\r\n} from \"./actions/steps\";\r\nimport {\r\n    BlocklyDebuggeeeBreakpointsAction,\r\n    BlocklyDebuggeeeRunToCursor\r\n} from \"./actions/breakpoints\";\r\n\r\nonmessage = function (msg) {\r\n    let obj = msg.data;\r\n    dispatcher[obj.type](obj.data);\r\n}\r\n\r\nexport function BlocklyDebuggee (plugin) {\r\n    InitializeBlocklyDebuggee(plugin);\r\n\r\n    BlocklyDebuggeeStartAction(plugin);\r\n\r\n    BlocklyDebuggeeWatchAction(plugin);\r\n    BlocklyDebuggeeVariablesAction(plugin);\r\n    BlocklyDebuggeeEvalAction();\r\n\r\n    BlocklyDebuggeeContinueAction();\r\n    BlocklyDebuggeeStepInAction();\r\n    BlocklyDebuggeeStepOverAction();\r\n    BlocklyDebuggeeStepOutAction();\r\n    BlocklyDebuggeeStepParentAction();\r\n\r\n    BlocklyDebuggeeeBreakpointsAction(plugin);\r\n    BlocklyDebuggeeeRunToCursor();\r\n}\r\n\r\n/**\r\n * \r\n */\r\nvar plugin = {\r\n    postMessage: postMessage\r\n};\r\n\r\nBlocklyDebuggee(plugin);\r\n","import { Blockly_Debuggee, dispatcher } from '../init.js';\r\n\r\nBlockly_Debuggee.actions[\"watch\"] = {};\r\nBlockly_Debuggee.actions[\"variables\"] = {};\r\nBlockly_Debuggee.actions[\"eval\"] = {};\r\n\r\nexport function BlocklyDebuggeeWatchAction() {\r\n    Blockly_Debuggee.actions[\"watch\"] = (function () {\r\n        var watches = [];\r\n        function handler(new_watches) {\r\n            watches = new_watches;\r\n            for (var i = 0; i < watches.length; ++i) {\r\n                Blockly_Debuggee.actions[\"eval\"].evalLocal(\"var watches = Blockly_Debuggee.actions[\\\"watch\\\"].getWatches();\" + 'watches[' + i + '].value = ' + watches[i].code + ';\\n');\r\n            }\r\n            updateDebugger();\r\n        };\r\n\r\n        function includes(variable) {\r\n            return watches.includes(variable);\r\n        };\r\n\r\n        function update(updated) {\r\n            watches = updated;\r\n        };\r\n\r\n\r\n        function update_values() {\r\n            var code = '';\r\n            for (var i = 0; i < watches.length; ++i) {\r\n                code += 'watches[' + i + '].value = ' + watches[i].code + ';\\n';\r\n            }\r\n            return \"var watches = Blockly_Debuggee.actions[\\\"watch\\\"].getWatches();\" + code;\r\n        }\r\n\r\n        function getWatches() {\r\n            return watches;\r\n        }\r\n\r\n        function updateDebugger() {\r\n            postMessage({ \"type\": \"watches\", \"data\": watches });\r\n        }\r\n\r\n\r\n        return {\r\n            handler: handler,\r\n            includes: includes,\r\n            update: update,\r\n            update_values: update_values,\r\n            getWatches: getWatches,\r\n            updateDebugger: updateDebugger\r\n        };\r\n    })();\r\n    dispatcher.watch = Blockly_Debuggee.actions[\"watch\"].handler;\r\n}\r\n\r\nexport function BlocklyDebuggeeVariablesAction(plugin) {\r\n    Blockly_Debuggee.actions[\"variables\"] = (function () {\r\n        var variables = [];\r\n        function update(new_vars) {\r\n            variables = new_vars;\r\n        };\r\n\r\n\r\n        function update_values() {\r\n            var code = '';\r\n            for (var i = 0; i < variables.length; ++i) {\r\n                code += 'variables[' + i + '].value = ' + variables[i].name + ';\\n';\r\n            }\r\n            return code;\r\n        }\r\n\r\n        function getVariables() {\r\n            return variables;\r\n        }\r\n\r\n        function updateDebugger() {\r\n            /*plugin.*/postMessage({ \"type\": \"variables\", \"data\": variables });\r\n        }\r\n\r\n        function define_variables() {\r\n            var code = '';\r\n            for (var i = 0; i < variables.length; ++i) {\r\n                code += 'var ' + variables[i].name + ';\\n';\r\n            }\r\n            return code;\r\n        }\r\n\r\n        return {\r\n            update: update,\r\n            update_values: update_values,\r\n            getVariables: getVariables,\r\n            updateDebugger: updateDebugger,\r\n            define_variables: define_variables\r\n        }\r\n    })();\r\n}\r\n\r\nexport function BlocklyDebuggeeEvalAction() {\r\n    Blockly_Debuggee.actions[\"eval\"].evalLocal;     // defined inside the start action in the eval()\r\n\r\n    Blockly_Debuggee.actions[\"eval\"].handler = function (expr) {\r\n        Blockly_Debuggee.actions[\"eval\"].evalLocal(expr);\r\n        Blockly_Debuggee.actions[\"eval\"].evalLocal(Blockly_Debuggee.actions[\"variables\"].update_values());\r\n        Blockly_Debuggee.actions[\"variables\"].updateDebugger();\r\n        Blockly_Debuggee.actions[\"eval\"].evalLocal(Blockly_Debuggee.actions[\"watch\"].update_values());\r\n        Blockly_Debuggee.actions[\"watch\"].updateDebugger();\r\n    }\r\n    dispatcher.eval = Blockly_Debuggee.actions[\"eval\"].handler;\r\n}\r\n","import {Blockly_Debuggee, dispatcher} from '../init.js';\r\n\r\nexport function BlocklyDebuggeeContinueAction() {\r\n  Blockly_Debuggee.actions.continue = {};\r\n\r\n  Blockly_Debuggee.actions.continue.handler = () => {\r\n    Blockly_Debuggee.state.stepWait = true;\r\n    Blockly_Debuggee.state.setState(\"continue\");\r\n  };\r\n\r\n  dispatcher.continue = Blockly_Debuggee.actions[\"continue\"].handler;\r\n}\r\n","import { Blockly_Debuggee, dispatcher } from '../init.js';\r\n\r\nexport function BlocklyDebuggeeStepInAction() {\r\n  Blockly_Debuggee.actions.stepIn = {};\r\n  Blockly_Debuggee.actions.stepIn.handler = () => {\r\n    Blockly_Debuggee.state.stepWait = true;\r\n    Blockly_Debuggee.state.setState(\"stepIn\");\r\n  };\r\n  dispatcher.stepIn = Blockly_Debuggee.actions[\"stepIn\"].handler;\r\n}\r\n\r\nexport function BlocklyDebuggeeStepOverAction() {\r\n  Blockly_Debuggee.actions.stepOver = {};\r\n  Blockly_Debuggee.actions.stepOver.handler = () => {\r\n    Blockly_Debuggee.state.stepWait = true;\r\n    Blockly_Debuggee.state.setState(\"stepOver\");\r\n  };\r\n  dispatcher.stepOver = Blockly_Debuggee.actions[\"stepOver\"].handler;\r\n}\r\n\r\nexport function BlocklyDebuggeeStepOutAction() {\r\n  Blockly_Debuggee.actions.stepOut = {};\r\n  Blockly_Debuggee.actions.stepOut.handler = () => {\r\n    Blockly_Debuggee.state.stepWait = true;\r\n    Blockly_Debuggee.state.setState(\"stepOut\");\r\n  };\r\n  dispatcher.stepOut = Blockly_Debuggee.actions[\"stepOut\"].handler;\r\n}\r\n\r\nexport function BlocklyDebuggeeStepParentAction() {\r\n  Blockly_Debuggee.actions.stepParent = {};\r\n  Blockly_Debuggee.actions.stepParent.handler = () => {\r\n    Blockly_Debuggee.state.stepWait = true;\r\n    Blockly_Debuggee.state.setState(\"stepParent\");\r\n  };\r\n  dispatcher.stepParent = Blockly_Debuggee.actions[\"stepParent\"].handler;\r\n}\r\n","import {Blockly_Debuggee, dispatcher} from '../init.js';\r\n\r\n\r\nexport function BlocklyDebuggeeeBreakpointsAction(plugin) {\r\n    Blockly_Debuggee.actions[\"breakpoint\"] = (function(){\r\n        var breakpoints = [];\r\n        function handler(br){\r\n            breakpoints = br;\r\n        };\r\n\r\n        function includes_enable(block_id){\r\n            // check also if the breakpoint is enable\r\n            return breakpoints.map((obj)=>{if(obj.enable) return obj.block_id}).includes(block_id);\r\n        };\r\n        \r\n        function update(updated){\r\n            breakpoints = updated;\r\n        };\r\n\r\n        function wait_view(block_id){\r\n            if(includes_enable(block_id))\r\n                /*plugin.*/postMessage({\"type\": \"breakpoint_wait_view\", \"data\" : block_id});\r\n        }\r\n\r\n        function reset_view(block_id){\r\n            if(includes_enable(block_id))\r\n                /*plugin.*/postMessage({\"type\": \"breakpoint_reset_view\", \"data\" : block_id});\r\n        }\r\n\r\n        return {\r\n            handler : handler,\r\n            includes_enable: includes_enable,\r\n            update : update,\r\n            wait_view : wait_view,\r\n            reset_view : reset_view\r\n        };\r\n    })();\r\n    dispatcher.breakpoint = Blockly_Debuggee.actions[\"breakpoint\"].handler;\r\n}\r\n\r\nexport function BlocklyDebuggeeeRunToCursor() {\r\n    Blockly_Debuggee.actions[\"runToCursor\"] = (function(){\r\n        var cursorBreakpoint = \"\";\r\n        function handler(block_id){\r\n            Blockly_Debuggee.actions[\"runToCursor\"].cursorBreakpoint = block_id;\r\n            Blockly_Debuggee.state.stepWait = true;\r\n        }\r\n\r\n        return {\r\n            cursorBreakpoint : cursorBreakpoint,\r\n            handler : handler\r\n        }\r\n    })();\r\n    dispatcher.runToCursor = Blockly_Debuggee.actions[\"runToCursor\"].handler;\r\n}\r\n"],"sourceRoot":""}