import { ProjectItemViewState } from './item-view/item-view';
import { ViewRegistry } from "../../../../../component/registry";
import { IDEUIComponent } from "../../../../../component/ide-ui-component";
import { View, ViewMetadata, IViewUserStyleData } from "../../../../../component/view";
import { ProjectCategoryView as CategoryView } from "./category-view/category-view";
import { ActionsView } from "../../../../../common-views/actions-view/actions-view";
import { IProjectManagerElementData } from "../../../project-manager";

import * as _ from "lodash";

/// <reference path="../../../../../../../../../node.d.ts"/>
import ProjectManagerAppInstanceViewTmpl from "./project-manager-app-instance-view.tmpl";
import { PageFoldingView } from '../../../../../common-views/page-folding-view/page-folding-view';
import { ProjectManagerElementView } from "./project-manager-element-view";
import { assert } from "../../../../../../../ide/shared/ide-error/ide-error";

interface IAppInstanceEvent {
    type: string;
    callback: string;
    providedBy: string;
}

interface IAppInstanceAction {
    title: string;
    img: string;
    help?: string;
    events: Array<IAppInstanceEvent>;
};
interface IAppInstanceMenuItem extends IAppInstanceAction {};

interface IAppInstanceData {
    id: string;
    title: string;
    img: string;
    actions: Array<IAppInstanceAction>;
    menu: Array<IAppInstanceMenuItem>;
};

interface _IJSTreeNode {
    id: string; // will be autogenerated if omitted
    type: string;
    text: string; // node text
    color?: string; // vertical color
    icon?: string; // string for custom
    highlighted?: {};
    options?: boolean;
    connection_state?: string;
    shared_state?: string;
    state?: {
        opened?: boolean;  // is the node open
        disabled?: boolean;  // is the node disabled
        selected?: boolean;  // is the node selected
    };
    li_attr?: {};  // attributes for the generated LI node
    a_attr?: {}; // attributes for the generated A node
};
interface IJSTreeNodeChildren extends _IJSTreeNode {
    children: Array<string | IJSTreeNodeChildren>;
};
interface IJSTreeNodeParent extends _IJSTreeNode {
    parent: string;
};
type IJSTreeNode = IJSTreeNodeChildren | IJSTreeNodeParent;

@ViewMetadata({
    name: "ProjectInstanceView",
    templateHTML: ProjectManagerAppInstanceViewTmpl
})
export class ProjectInstanceView extends View {
    private readonly categoriesViewSelector;
    private foldingView: PageFoldingView;

    private renderData: any;
    private actions: ActionsView;
    private categsData: Array<IJSTreeNode>;
    private types;
    private contextmenu;
    private clickaction;
    private treeview;
    private bgRenderItems: Array<string>;

    private constructor(
        parent: IDEUIComponent,
        name: string,
        templateHTML: string,
        style: Array<IViewUserStyleData>,
        hookSelector: string,
        private data: any
    ) {
        super(
            parent,
            name,
            templateHTML,
            View.MergeStyle(
                style,
                ProjectManagerElementView
                    .getElementStyle("title", data.meta.domain)
            ),
            hookSelector
        );
        data.id = this.id;
        this.categoriesViewSelector = "#categories-" + this.id;
        this.renderData = {
            id: this.id,
            instance: {
                id: data.project._id,
                title: data.project.title,
                img: data.project.img,
            },
            defaultDomainImg: data.meta.defaultDomainImg
        };

        this.foldingView = <PageFoldingView>ViewRegistry
            .getEntry("PageFoldingView")
            .create(this.parent, "#project-folding-"+this.id);
        this.foldingView
            .setPFSelector("#folding-app-instance-categories-"+this.id);

        this.initActions(data.meta.actions);

        this.initElem("menu", data.meta.actions);
        this.categsData = new Array<IJSTreeNode>();
        this.types = {};
        this.contextmenu = {};
        this.clickaction = {};
        this.bgRenderItems = [];

        _.forEach(data.meta.categories, (category) => {
            this.createCategoryItems(category, data.project.elements);
        });

        this.treeview = null;
    }

    //color, img, text, shared
    private __getValue_title(value) {
        let res = value.text;
        assert(typeof res !== "undefined", "title render value unexpected value");
        return res;
    }
    private __getValue_img(value) {
        let res = value.path || value.fa || value.glyphicon;
        assert(typeof res !== "undefined", "img render value unexpected value");
        return res;
    }
    private __getValue_colour(value) {
        let res = value.colour || value.default;
        assert(typeof res !== "undefined", "color render value unexpected value");
        return res;
    }
    // smart object state
    private __getValue_state(value) {
        if (!value) {
            return "offline";
        }

        return this.__getValue_img(value.state ? value.state : value);
    }
    private __getValue_shared(value) {
        let res = value.shared;
        assert(typeof res !== "undefined", "colour render value unexpected value");
        return res;
    }
    private getValue(obj) {
        if (typeof obj === "undefined" || typeof obj === "string") {
            return obj;
        }
        let value = obj.value;
        if (typeof value === "string") {
            return value;
        }

        return this["__getValue_"+obj.type](value);
    }

    private setContentMenuObj(actions): any {
        let menuObj = {};

        actions.forEach((action, index) => {
            menuObj[index] = {};
            menuObj[index].label = action.title;
            menuObj[index].icon = action.img;
            if (action.events) {
                let event = action.events.find(x => x.type === "click");
                menuObj[index].action = (node) => {
                    this.onActionItem(node, event);
                };
            }

            if (action._disabled) {
                menuObj[index]._disabled = true;
            }
            if (action._class) {
                menuObj[index]._class = action._class;
            }
            if (action.separator_before) {
                menuObj[index].separator_before = true;
            }
            if (action.separator_before) {
                menuObj[index].separator_before = true;
            }

            if (action.submenu) {
                menuObj[index].submenu = this.setContentMenuObj(action.submenu);
            }
        });

        return menuObj;
    }

    public setContextMenu(category) {
        this.types[category.type] = {};
        category.validChildren.forEach(type => this.types[type] = {});
        this.contextmenu[category.type] = this.setContentMenuObj(category.actions);
    }

    public setClickAction(category) {
        this.clickaction[category.type] = {};

        if (category.items) {
            category.items.forEach(item => {
                let actionClick = item.events.find(x => x.type === "click");
                this.clickaction[item.type] = {
                    action: actionClick
                };
            });
        }
    }

    private createCategoryItems(category, elements): void {
        category.id = "jstree_" + category.type;
        let infoC: Array<any> = category.renderParts;
        let text = infoC.find(x => x.type === "title");
        let icon = infoC.find(x => x.type === "img");
        let color = infoC.find(x => x.type === "colour");

        this.setContextMenu(category);
        this.setClickAction(category);

        let categData: IJSTreeNode = {
            id: category.id,
            type: category.type,
            parent: category.parent || "#",
            text: this.getValue(text),
            icon: this.getValue(icon),
            color: this.getValue(color),
            state: {
                opened: true
            },
            options: category.actions && category.actions.length > 0
        };

        categData.highlighted = category.highlighted ||
            {
                bgColor: "rgb(208, 208, 208)",
                bgColorHover: "rgb(198, 198, 198)",
                options: {
                    color: "black",
                    hover: "white"
                }
            };

        this.categsData.push(categData);
        this.bgRenderItems.push(category.id);

        this.addProjectItems(category.id, elements);

        if (category.categories) {
            category.categories.forEach (scategory => {
                scategory.parent = category.id;
                scategory.highlighted = scategory.highlighted ||
                    {
                        bgColor: "rgb(228, 228, 228)",
                        bgColorHover: "rgb(208, 208, 208)",
                        options: {
                            color: "black",
                            hover: "white"
                        }
                    };
                this.createCategoryItems(scategory, elements);
            });
        }
    }

    private addProjectItem (parentId, item): void {
        let infoC: Array<any> = item.renderParts;
        let text = this.getValue(infoC.find(x => x.type === "title"));
        let icon = this.getValue(infoC.find(x => x.type === "img"));
        let color = this.getValue(infoC.find(x => x.type === "colour"));
        let connection_state = this.getValue(infoC.find(x => x.type === "state"));
        let shared_state = this.getValue(infoC.find(x => x.type === "shared"));

        item.id = item.systemID
            ? item.systemID
            : "jstree_" + parentId + "_" + text;

        let itemData: IJSTreeNode = {
            id: item.id,
            parent: parentId,
            type: item.type,
            text: text,
            icon: icon,
            color: color,
            connection_state: connection_state,
            shared_state: shared_state,
            state: {
                opened: true
            }
        };
        this.categsData.push(itemData);
    }

    private addProjectItems(parentId: string, items: Array<any>): void {
        let pitems = items.filter(x => x.parent === parentId);

        for (let i=1, j=pitems.length; i<=j; i++) {
            let item = pitems.find(x => x.orderNO === i);

            this.addProjectItem(parentId, item);
            // add children
            this.addProjectItems(item.systemID, items);
        }
    }

    private initActions(data) {
        if (data.length > 0) {
            this.actions = <ActionsView>ViewRegistry
                .getEntry("ActionsView")
                .create(
                    this.parent,
                    "#app-instance-actions-"+this.id,
                    [
                        {
                            selector: ".actions-view-title-fa",
                            styles: {
                                css: {
                                    color: "white"
                                }
                            }
                        }
                    ],
                    {
                        "actions": data
                    }
                );
        }
    }

    private initElem (type: string, data: any): void {
        if (data[type]) {
            let typeFU: string = type[0].toUpperCase() + type.substr(1);
            this[type] = ViewRegistry
                    .getEntry("ProjectManager"+typeFU+"View")
                    .create(
                        this.parent,
                        this.categoriesViewSelector,
                        data[type]
                    );
            return;
        }
        this[type] = null;
    }

    private renderElem(type: string): void {
        if (this[type] !== null) {
            this[type].render();
            this.appendLocal(".app-instance-"+type, this[type].$el);
        }
    }

    private itemsMenu(node) {
        return this.contextmenu[node.type];
    }

    public render(): void {
        this.renderTmplEl(this.renderData);
        this.foldingView.render();
        this.renderElem("actions");
        this.renderElem("menu");

        if (this.treeview) {
            this.treeview.destroy();
        }
        $(this.categoriesViewSelector).empty();

        $(this.categoriesViewSelector).jstree({
            "plugins": [
                "wholerow", // has to be first for the highlighted categories
                "colorv",
                "contextmenu",
                "types"
            ],
            "contextmenu": {
                "items": (node) => this.itemsMenu(node)
            },
            "types": this.types,
            "core": {
                "check_callback": true,
                "data": this.categsData
            }
        });
        this.treeview = $.jstree.reference(this.categoriesViewSelector);

        // bootstrap adds hidden in overflow which destroys z-index in dropdown menu
        $("#folding-app-instance-categories-"+this.id).css("overflow", "");
    }

    public onClickItem(node): void {
        let action = this.clickaction[node.type].action;

        if (action) {
            this.onActionItem(node, action);
        }
    }

    public onActionItem(node, action): void {
        let itemData = this.data.project.elements
            .find(x => x.systemID === node.id);
        this.parent["onOuterFunctionRequest"](action, itemData);
    }

    public registerEvents(): void {
        this.attachEvents(
            {
                eventType: "contextmenu",
                selector: ".project-manager-app-instance-info-actions-area",
                handler: (evt) => {
                    evt.preventDefault();
                    this.actions.open(evt);
                }
            },
            {
                eventType: "click",
                selector: ".project-manager-app-instance-info-actions-area",
                handler: (evt) => {
                    if (!this.actions.isOnTarget(evt.target)) {
                        if(this.foldingView) {
                            this.foldingView.onClick();
                        }
                    }
                }
            },
            {
                eventType: "mouseover",
                selector: ".project-manager-app-instance-info-actions-area",
                handler: (evt) => {
                    // TODO: check if functionality of actions hidden is enable
                    if (this.actions) this.actions.show();

                    // TODO: check if mouseover changes colour in current domain meta and set respective style
                    $("#project-manager-app-instance-info-"+this.id)
                        .css("background-color", "rgb(117, 115, 115)");
                }
            },
            {
                eventType: "mouseout",
                selector: ".project-manager-app-instance-info-actions-area",
                handler: (evt) => {
                    // check if functionality of actions hidden is enable
                    if (this.actions) {
                        this.actions.hide();
                    }
                    // check if mouseover changes colour in current domain meta and set respective style
                    $("#project-manager-app-instance-info-"+this.id)
                        .css("background-color", "rgb(80, 80, 80)");
                }
            }
        );
        var onclickFunc = (node) => this.onClickItem(node);
        // events for tree view
        $(this.categoriesViewSelector)
            .on(
                "click",
                ".jstree-anchor",
                function (e) {
                    var node = $(this.categoriesViewSelector)
                        .jstree(true)
                        .get_node($(this));
                    onclickFunc(node);
                }
            );

        // $('#options_jstree_SmartObjects').on('click', function (e) {
        //     $('#jstree_SmartObjects_anchor').trigger({
        //         type: 'contextmenu.jstree', pageX: e.pageX, pageY: e.pageY
        //     }); e.preventDefault(); return false
        // });
    }

    public setStyle(): void {
        ;
    }

    public destroy(): void {
        super.destroy();
        $("#" + this.id).find("div:jstree").each(function (): void {
            $(this).jstree("destroy");
        });
    }

    // on remove element has to ask logic deps etc.
    public removeElement(elementID: string): boolean {
        // check deps if it is allowed to remove or not

        // open new focused project item

        return this.treeview.delete_node(elementID);
    }

    public hasElement(name: string): boolean {
        let elem = this.treeview.settings.core.data.find(x => x.text === name);
        return elem !== undefined;
    }
}
